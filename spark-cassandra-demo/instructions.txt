Start Cassandra Clsuter / Standalone Node


drop keyspace capstone;

CREATE KEYSPACE capstone WITH replication = {'class': 'SimpleStrategy','replication_factor': 1}


CREATE TABLE carddetails (
	cardId bigint,
	customerId bigint,
	bank text,
	type text,
	expiryMonth int,
	expiryYear int,
	valid_month int,
	valid_year int,
	cardNum text,
	cardLimit float,
	PRIMARY KEY ((cardId),bank));
	

CREATE TABLE customer (
	customerid bigint PRIMARY KEY,
	name text,
	mobilenumber text,
	gender text,
	title text,
	martial_status text,
	birthdate bigint,
	created bigint,
	email text,
	address text,
	state text,
	country text,
	pincode text );
	
	

CREATE TABLE merchant (
	merchantid bigint PRIMARY KEY,
	merchantname text,
	mobilenumber text,
	startdate bigint,
	email text,
	address text,
	state text,
	country text,
	pincode text,
	taxRegNum text,
	description text,
	longlat text
	 );


CREATE TABLE capstone.order_transaction (
    transactionid bigint PRIMARY KEY,
    customerid bigint,
    invoiceamount float,
    invoicenumber text,
    merchantid bigint,
    status text,
    timestamp bigint,
    segment text
);


CREATE TABLE customer_transaction (
    customerid bigint PRIMARY KEY,
    ordersuccesscounter counter,
    ordercancelcounter counter,
    orderbelow500 counter,
    orderbelow1000 counter,
    orderbelow2000 counter,
    orderabove2000 counter
);

CREATE TABLE merchant_transaction (
    merchantid bigint PRIMARY KEY,
    ordersuccesscounter counter,
    ordercancelcounter counter,
    orderbelow500 counter,
    orderbelow1000 counter,
    orderbelow2000 counter,
    orderabove2000 counter
);

CREATE TABLE daily_transaction (
    date text PRIMARY KEY,
    ordersuccesscounter counter,
    ordercancelcounter counter,
    orderbelow500 counter,
    orderbelow1000 counter,
    orderbelow2000 counter,
    orderabove2000 counter
);

CREATE MATERIALIZED VIEW bank_by_customer AS  SELECT customerId,bank FROM carddetails WHERE customerId is not null and bank is not null PRIMARY KEY ((customerId),bank,cardId);



CREATE TABLE bank_merchant_transaction (
	year int,
	month int,
    bank text,
    merchantid bigint,
    totalamount float,
    ordercount int,
    segment text,
    PRIMARY KEY ((year,month),bank,merchantid,segment)
);


CREATE TABLE merchant_gender_transaction (
	year int,
	month int,
    merchantid bigint,
    gender text,
    amount float,
    PRIMARY KEY ((year,month),merchantid,gender)
);


CREATE TABLE merchant_gender_segment_transaction (
	year int,
	month int,
    merchantid bigint,
    segment text,
    gender text,
    amount float,
    PRIMARY KEY ((year,month),merchantid,gender)
);


//Not in use
CREATE TABLE bank_total_transaction (
    date text,
    bank text,
    totalAmount float,
    PRIMARY KEY ((date,bank),totalAmount)
);

cd /tmp/capstone/capstone

mvn clean package

cd /usr/local/spark/bin


/usr/local/spark/bin/spark-submit --class com.edureka.capstone.jobs.BankMerchantAggregationJob /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

/usr/local/spark/bin/spark-submit --class com.edureka.capstone.jobs.SparkStreamingCardJob /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

/usr/local/spark/bin/spark-submit --class com.edureka.capstone.jobs.SparkStreamingCustomerJob /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

/usr/local/spark/bin/spark-submit --class com.edureka.capstone.jobs.SparkStreamingMerchantJob /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

/usr/local/spark/bin/spark-submit --class com.edureka.capstone.jobs.SparkStreamingTransactionJob /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar


spark-submit --class com.edureka.capstone.jobs.SparkStreamingCustomerJob --master yarn --deploy-mode cluster /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar
spark-submit --class com.edureka.capstone.jobs.SparkStreamingMerchantJob --master yarn --deploy-mode cluster /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar
spark-submit --class com.edureka.capstone.jobs.SparkStreamingTransactionJob --master yarn --deploy-mode cluster /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar
spark-submit --class com.edureka.capstone.jobs.SparkStreamingCardJob --master yarn --deploy-mode cluster /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar
spark-submit --class com.edureka.capstone.jobs.BankMerchantAggregationJob --master yarn --deploy-mode cluster /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

spark-submit --class com.edureka.capstone.jobs.SparkStreamingTxJob --master yarn --deploy-mode cluster /mnt/home/edureka_339659/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

bin/kafka-console-consumer.sh --zookeeper 20.0.32.147:2181 --topic merchant_topic --from-beginning

bin/kafka-console-consumer.sh --zookeeper 20.0.32.147:2181 --topic transaction_topic


bin/kafka-console-producer.sh --broker-list 20.0.31.78:9092,20.0.32.147:9092,20.0.31.127:9092 --topic transaction_topic

//http://msvaljek.blogspot.in/2015/12/stream-processing-with-spring-kafka_13.html

https://archive.apache.org/dist/spark/spark-2.1.0/spark-2.1.0-bin-hadoop2.7.tgz

https://archive.apache.org/dist/kafka/0.8.2.1/kafka_2.11-0.8.2.1.tgz


> src/main/java/com/edureka/capstone/jobs/SparkStreamingCustomerJob.java 

spark-submit  --class com.edureka.capstone.jobs.SparkStreamingMerchantJob /Users/raghugupta/Documents/gitrepo/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar

spark-submit  --class com.edureka.capstone.jobs.SparkStreamingCustomerJob /Users/raghugupta/Documents/gitrepo/capstone/spark-cassandra-demo/target/spark-cassandra-demo-0.0.1-SNAPSHOT-jar-with-dependencies.jar 





HIVE

http://hive.praveendeshmane.co.in/hive/hive-2-1-0-installation-with-mysql-database-on-ubuntu-14-04.jsp

bin/hdfs dfs -mkdir /customer/
bin/hdfs dfs -mkdir /merchant/
bin/hdfs dfs -mkdir /card/
bin/hdfs dfs -mkdir /transaction/



CREATE EXTERNAL TABLE IF NOT EXISTS customer(customerid BIGINT, name STRING, mobilenumber STRING, gender STRING, birthdate STRING,email STRING,address STRING,state STRING,country STRING,pincode BIGINT,title STRING,martial_status STRING,created STRING) COMMENT 'Customer Detail' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE LOCATION '/customer';
CREATE EXTERNAL TABLE IF NOT EXISTS transaction(transactionid STRING, customerid BIGINT, merchantid BIGINT, tx_timestamp STRING,invoicenumber STRING,invoiceamount DOUBLE,segment STRING) COMMENT 'Transaction details' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE LOCATION '/transaction';
CREATE EXTERNAL TABLE IF NOT EXISTS card(cardid BIGINT,customerid BIGINT, bank STRING, type STRING, valid_month INT, valid_year INT, expirymonth INT, expiryyear INT,cardnum String, cardlimit double) COMMENT 'Card Details' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE LOCATION '/card';
CREATE EXTERNAL TABLE IF NOT EXISTS merchant(merchantid BIGINT, taxregnum STRING,merchantname String, mobilenumber STRING,startdate STRING, email STRING,address STRING,state STRING,country STRING,pincode BIGINT,description STRING,longlat STRING) COMMENT 'Merchant details' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE LOCATION '/merchant';